{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","className","cityname","weatherIcon","temp_celsius","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","min","max","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","city","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelcius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Atmosphere","clear","Clouds","Math","floor","icons","rangeId","this","Snow","Clear","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d137acf3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./weather.style.css\";\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"Card\">\r\n        <h1 className=\"text-white py-3\">{props.cityname}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n\r\n        {/* Get Celsius */}\r\n        {props.temp_celsius ? (\r\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/* show max and min temp */}\r\n        {maxminTemp(props.temp_min, props.temp_max)}\r\n\r\n        {/* Weather description */}\r\n        <h4 className=\"py-3\">\r\n          {props.description.charAt(0).toUpperCase() +\r\n            props.description.slice(1)}\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n\r\nfunction maxminTemp(min, max) {\r\n  if (max && min) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    name=\"city\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"City\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    name=\"country\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"Country\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n      <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n        Please Enter City and Country\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Form;","// import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\nimport'weather-icons/css/weather-icons.min.css';\nimport'bootstrap/dist/css/bootstrap.min.css';\n\n// api call api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}\nconst API_key = \"375360959d549f05e232371cf556ec57\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      city : undefined,\n      country : undefined,\n      icon : undefined,\n      main : undefined,\n      celsius : undefined,\n      temp_max : undefined,\n      temp_min : undefined,\n      description: \"\",\n      error: false\n     }\n\n    this.weatherIcon = {\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle : \"wi-sleet\",\n      Rain : \"wi-storm-showers\",\n      Atmosphere : \"wi-fog\",\n      clear : \"wi-day-sunny\",\n      Clouds : \"wi-day-fog\"\n    }\n  }\n\n  calCelcius(temp){\n    let cell = Math.floor(temp - 273.15)\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  getWeather = async (e) =>{\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.city.value;\n\n    if(city && country){\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n      );\n    \n      const response = await api_call.json();\n\n      console.log(response);\n\n      this.setState({\n      city: `${response.name}, ${response.sys.country}`,\n      celsius: this.calCelcius(response.main.temp),\n      temp_max: this.calCelcius(response.main.temp_max),\n      temp_min: this.calCelcius(response.main.temp_min),\n      description: response.weather[0].description,\n      });\n\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n    }else{\n      this.setState({error : true});\n    }\n\n  };\n\n  render() { \n    return (\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n      <Weather \n      city={this.state.city} \n      country={this.state.country} \n      temp_celsius={this.state.celsius}\n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      weatherIcon={this.state.icon}\n      />\n    </div>\n      );\n  };\n};\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}